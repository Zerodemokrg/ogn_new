import 'dart:convert';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import '../../configs/urls.dart';import '../../controllers/intl.dart';import '../../main.dart';import '../../models/models.dart';import '../../services/external/api.dart';import '../themes/defaultTheme.dart';import '../widgets/appBar.dart';import '../widgets/dialogs.dart';class AppealPage extends StatefulWidget{  @override  _AppealPageState createState()=>new _AppealPageState();}class _AppealPageState extends State<AppealPage> {  bool isBlocked=false;  bool isLoaded = true;  final List<bool> _selectedType=<bool>[true,false];  Appeal appeal=Appeal(type: "", authorName: "", authorPhone:"", value: "");  List<Widget> types=<Widget>[    Obx((){return     Text( localSettingsController.selectLanguage.value=="RU"?'Жалоба':localSettingsController.selectLanguage.value=="KZ"?'Шағымдар':'Complaints',style: TextStyle(fontSize: 16));    }),    Obx((){return     Text( localSettingsController.selectLanguage.value=="RU"?'Предложение':localSettingsController.selectLanguage.value=="KZ"?'Ұсыныстар':'Suggestions',style: TextStyle(fontSize: 16));}),  ];  getData() async {    setState(() {      _selectedType.first==true?appeal.type="complaints":appeal.type="suggestions";    });  }  Future<void> _showResultDialog(DeliveryCreateResponse response) async {    await showDialog(      context: context,      builder: (BuildContext context) {        return MessageFromServerWidget(data: response,);      },    );  }  @override  void initState() {    // TODO: implement initState    super.initState();    getData();  }  @override  Widget build(BuildContext context) {    double _width= MediaQuery.of(context).size.width;    return Obx((){      return CustomScrollView(        slivers: [          SiteSliverAppBar(title: ''),          SliverToBoxAdapter(              child: Container(                margin: EdgeInsets.only(top: 40),                  alignment: Alignment.center,                  child: localSettingsController.selectLanguage.value=="RU"?Text("Подача жалобы или предложения:",textAlign: TextAlign.center,style: themData.textTheme.headlineLarge,):(localSettingsController.selectLanguage.value=="KZ"?Text("Шағым немесе ұсыныс жіберу:",textAlign: TextAlign.center,):Text("Submitting a complaint or suggestion:",textAlign: TextAlign.center,))              )          ),          SliverToBoxAdapter(            child: Container(              margin: EdgeInsets.only(top: 20),              child: Column(                children: [                  ToggleButtons(                      children: types,                      onPressed: (int index) {                        setState(() {                          // The button that is tapped is set to true, and the others to false.                          for (int i = 0; i < _selectedType.length; i++) {                            _selectedType[i] = i == index;                            _selectedType.first==true?appeal.type="complaints":appeal.type="suggestions";                          }                        });                        print(_selectedType);                      },                      borderRadius: const BorderRadius.all(Radius.circular(8)),                      selectedBorderColor: primaryColor,                      selectedColor: Colors.white,                      fillColor: primaryColor,                      color: primaryColor,                      constraints:  BoxConstraints(                        minHeight: 40.0,                        minWidth:  _width>770?200.0:150,                      ),                      isSelected: _selectedType),                  Container(                    constraints: BoxConstraints(                      maxWidth: 770,                    ),                    margin: EdgeInsets.only(),                    padding: EdgeInsets.all(25),                    child: TextFormField(                      decoration:  InputDecoration(                        filled: true,                        fillColor: Colors.black,                        labelText: localSettingsController.selectLanguage.value=="RU"?"Имя":(localSettingsController.selectLanguage.value=="KZ"?"Аты":"Name"),                        border: OutlineInputBorder(                          borderRadius: BorderRadius.circular(10),                        ),                        floatingLabelStyle: themData.textTheme.displaySmall,                      ),                      onChanged: (text){                        setState(() {                          appeal.authorName=text;                        });                      },                    ),                  ),                  Container(                    constraints: BoxConstraints(                      maxWidth: 770,                    ),                    margin: EdgeInsets.only(),                    padding: EdgeInsets.all(25),                    child: TextFormField(                      inputFormatters: [FilteringTextInputFormatter.digitsOnly],                      keyboardType: TextInputType.phone,                      decoration: new InputDecoration(                       // errorText:  checkValid.phone==false?localSettingsController.selectLanguage.value=="RU"?namePhoneFailInForm.first:(localSettingsController.selectLanguage.value=="KZ"?namePhoneFailInForm[1]:namePhoneFailInForm[2]):null,                        filled: true,                        fillColor: Colors.black,                        labelText: localSettingsController.selectLanguage.value=="RU"?namePhoneInForm.first:(localSettingsController.selectLanguage.value=="KZ"?namePhoneInForm[1]:namePhoneInForm[2]),                        border: OutlineInputBorder(                          borderRadius: BorderRadius.circular(10),                        ),                      ),                      onChanged: (text){                        appeal.authorPhone=text;                      },                    ),                  ),                  Container(                    constraints: BoxConstraints(                      maxWidth: 770,                    ),                    margin: EdgeInsets.only(),                    padding: EdgeInsets.all(25),                    child: TextFormField(                      keyboardType: TextInputType.multiline,                      maxLines: null,                      textAlignVertical: TextAlignVertical.top,                      decoration:  InputDecoration(filled: true,                        fillColor: Colors.black,                        labelText: localSettingsController.selectLanguage.value=="RU"?"Описания":(localSettingsController.selectLanguage.value=="KZ"?"Пікір":"Problem descriptions"),                        floatingLabelAlignment: FloatingLabelAlignment.start,                        border: OutlineInputBorder(                          borderRadius: BorderRadius.circular(10),                        ),                      ),                      onChanged: (text){                        setState(() {                          appeal.value=text;                        });                      },                    ),                  ),                  Container(                    margin: EdgeInsets.only(bottom: 30),                    height: 50,                    padding: EdgeInsets.only(left: 25,right: 25),                    constraints: BoxConstraints(                      maxWidth: 770,                    ),                    //   height: 164,                    //    margin: EdgeInsets.only(left: 15,right: 15),                    child: ElevatedButton(                        onPressed:isBlocked==true?null:() async {                          setState(() {                            isBlocked=true;                          });                          var result= await API.postAppeal(appeal, MainConfig().createAppealUrl);                          if (result is bool && result==true){                            DeliveryCreateResponse response=new DeliveryCreateResponse(message: localSettingsController.selectLanguage.value=="RU"?"Ваше обращение отправлено,спасибо за обратную связь":(localSettingsController.selectLanguage.value=="KZ"?"Тапсырыс жасау кезіндегі қате":"Your request has been sent, thank you for your feedback"), orderNumber:"" , error: false);                            _showResultDialog(response);                          } else {                            DeliveryCreateResponse response=new DeliveryCreateResponse(message: localSettingsController.selectLanguage.value=="RU"?"Ошибка при попытке отправить обращение, попробуйте позже":(localSettingsController.selectLanguage.value=="KZ"?"Сұрау жіберу кезінде қате пайда болды, әрекетті кейінірек қайталаңыз":"Error when trying to send a request, try again later"), orderNumber:"" , error: true);                            _showResultDialog(response);                          }                          await Future.delayed(Duration(seconds: 3));                          setState(() {                            isBlocked=false;                          });                          print(jsonEncode(appeal));                        },                        style: ButtonStyle(                          // backgroundColor: MaterialStateProperty.all<Color>(Color.fromRGBO(255, 23, 39,1)),                          // backgroundColor: Config().buttonColor as MaterialStateProperty<Color> ,                            backgroundColor:  MaterialStateProperty.all<Color>(primaryColor),                            //fixedSize: MaterialStateProperty.all<Size>(Size.fromHeight(85)),                            //  minimumSize: MaterialStateProperty.all(Size(200,70)),                            shape: MaterialStateProperty.all<RoundedRectangleBorder>(                                RoundedRectangleBorder(                                  borderRadius: BorderRadius.circular(8.0),                                  //side: const BorderSide(color: Colors.green)                                )                            )                        ),                        child: Container(                          alignment: Alignment.center,                          child: Text(                            softWrap: true,                            textAlign:TextAlign.center,                            style: TextStyle(fontFamily: 'Camfortaa',fontSize: 16,color: Colors.white),                            localSettingsController.selectLanguage.value=="RU"?"Отправить":(localSettingsController.selectLanguage.value=="KZ"?"Жіберу":"Send"),                          ),                        )                    ),                  )                ],              ),            ),          ),          // SliverFillRemaining(          //   hasScrollBody: false,          //   child: FooterWidget(),          // )        ],      );    });  }}